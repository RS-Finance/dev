{"version":3,"sources":["../../../../src/react/components/Query.tsx","../../../../src/react/components/Mutation.tsx","../../../../src/react/hooks/useMutation.ts","../../src/index.ts","graphql/localQueries.js","routes/TestRegistrar.js"],"names":["Query","props","children","query","options","result","propTypes","client","isRequired","fetchPolicy","notifyOnNetworkStatusChange","onCompleted","onError","pollInterval","variables","ssr","partialRefetch","returnPartialData","Mutation","mutation","runMutation","optimisticResponse","refetchQueries","awaitRefetchQueries","update","useMutation","called","loading","setResult","ref","mutationId","isMounted","Object","assign","current","execute","executeOptions","baseOptions","ignoreResults","error","data","clientOptions","mutate","then","response","errors","length","graphQLErrors","reset","GET_WEB3","gql","GET_PENDING_TRANSACTIONS","GET_TRANSACTION_HISTORY","REGISTER_DOMAIN","RegisterSubdomain","input","setTx","registerTestDomain","onSubmit","e","preventDefault","name","value","txId","console","log","node","type","TestRegistrar","state","started","web3","people","accounts","pendingTransactions","map","tx","id","href","transactionHistory","Component"],"mappings":"0KAMM,SAAUA,EACdC,GAEQ,IAAAC,EAAgCD,EAAK,SAA3BE,EAAsBF,EAAK,MAAjBG,EAAO,YAAKH,EAAlC,sBACAI,EAAS,YAASF,EAAOC,GAC/B,OAAOC,EAASH,EAASG,GAAiB,IAC5C,CAMAL,EAAMM,UAAY,CAChBC,OAAQ,SACRL,SAAU,OAAeM,WACzBC,YAAa,SACbC,4BAA6B,OAC7BC,YAAa,OACbC,QAAS,OACTC,aAAc,SACdV,MAAO,SAAiBK,WACxBM,UAAW,SACXC,IAAK,OACLC,eAAgB,OAChBC,kBAAmB,O,oCC9BrB,wDAMM,SAAUC,EACdjB,GAEM,MAAwB,YAAYA,EAAMkB,SAAUlB,GAAnDmB,EAAW,KAAEf,EAAM,KAC1B,OAAOJ,EAAMC,SAAWD,EAAMC,SAASkB,EAAaf,GAAU,IAChE,CAMAa,EAASZ,UAAY,CACnBa,SAAU,SAAiBX,WAC3BM,UAAW,SACXO,mBAAoB,YAAoB,CAAC,SAAkB,SAC3DC,eAAgB,YAAoB,CAClC,UACE,YAAoB,CAAC,SAAkB,YAEzC,SAEFC,oBAAqB,OACrBC,OAAQ,OACRtB,SAAU,OAAeM,WACzBG,YAAa,OACbC,QAAS,OACTH,YAAa,S,oICXT,SAAUgB,EAMdN,EACAf,GAEA,IAAMG,EAAS,YAAuB,OAAPH,QAAO,IAAPA,OAAO,EAAPA,EAASG,QACxC,YAAmBY,EAAU,IAAaD,UACpC,MAAsB,mBAAwC,CAClEQ,QAAQ,EACRC,SAAS,EACTpB,OAAM,IAHDF,EAAM,KAAEuB,EAAS,KAMlBC,EAAM,iBAAO,CACjBxB,OAAM,EACNyB,WAAY,EACZC,WAAW,EACXxB,OAAM,EACNY,SAAQ,EACRf,QAAO,IAMP4B,OAAOC,OAAOJ,EAAIK,QAAS,CAAE3B,OAAM,EAAEH,QAAO,EAAEe,SAAQ,IAGxD,IAAMgB,EAAU,uBAAY,SAC1BC,QAAA,IAAAA,MAAA,IAOM,MAA8BP,EAAIK,QAAjC3B,EAAM,SAAEH,EAAO,UAAEe,EAAQ,WAC1BkB,EAAc,OAAH,IAAG,CAAH,eAAQjC,GAAO,CAAEe,SAAQ,IACrCU,EAAIK,QAAQ7B,OAAOsB,SAAYU,EAAYC,gBAAiBT,EAAIK,QAAQH,WAC3EH,EAAUC,EAAIK,QAAQ7B,OAAS,CAC7BsB,SAAS,EACTY,WAAO,EACPC,UAAM,EACNd,QAAQ,EACRnB,OAAM,IAIV,IAAMuB,IAAeD,EAAIK,QAAQJ,WAC3BW,EAAgB,YACpBJ,EACAD,GAGF,OAAO7B,EAAOmC,OAAOD,GAAeE,MAAK,SAACC,G,UAChCJ,EAAiBI,EAAQ,KAAnBC,EAAWD,EAAQ,OAC3BL,EACJM,GAAUA,EAAOC,OAAS,EACtB,IAAI,IAAY,CAAEC,cAAeF,SACjC,EAEN,GACEf,IAAeD,EAAIK,QAAQJ,aAC1BW,EAAcH,cACf,CACA,IAAM,EAAS,CACbZ,QAAQ,EACRC,SAAS,EACTa,KAAI,EACJD,MAAK,EACLhC,OAAM,GAGJsB,EAAIK,QAAQH,YAAc,YAAMF,EAAIK,QAAQ7B,OAAQ,IACtDuB,EAAUC,EAAIK,QAAQ7B,OAAS,EAElC,CAGD,OAFgC,QAAhC,EAAmB,QAAnB,EAAAwB,EAAIK,QAAQ9B,eAAO,eAAEO,mBAAW,gBAAGiC,EAASJ,KAAOC,GACzB,QAA1B,EAAAL,EAAezB,mBAAW,gBAAGiC,EAASJ,KAAOC,GACtCG,CACT,IAAE,OAAO,SAACL,G,YACR,GACET,IAAeD,EAAIK,QAAQJ,YAC3BD,EAAIK,QAAQH,UACZ,CACA,IAAM,EAAS,CACbJ,SAAS,EACTY,MAAK,EACLC,UAAM,EACNd,QAAQ,EACRnB,OAAM,GAGH,YAAMsB,EAAIK,QAAQ7B,OAAQ,IAC7BuB,EAAUC,EAAIK,QAAQ7B,OAAS,EAElC,CAED,IAAuB,QAAnB,EAAAwB,EAAIK,QAAQ9B,eAAO,eAAEQ,UAAW6B,EAAc7B,QAIhD,OAH4B,QAA5B,EAAmB,QAAnB,EAAAiB,EAAIK,QAAQ9B,eAAO,eAAEQ,eAAO,gBAAG2B,EAAOE,GAChB,QAAtB,EAAAL,EAAexB,eAAO,gBAAG2B,EAAOE,GAEzB,CAAED,UAAM,EAAQK,OAAQN,GAGjC,MAAMA,CACR,GACF,GAAG,IAEGS,EAAQ,uBAAY,WACpBnB,EAAIK,QAAQH,WACdH,EAAU,CAAEF,QAAQ,EAAOC,SAAS,EAAOpB,OAAM,GAErD,GAAG,IAUH,OARA,qBAAU,WAGR,OAFAsB,EAAIK,QAAQH,WAAY,EAEjB,WACLF,EAAIK,QAAQH,WAAY,CAC1B,CACF,GAAG,IAEI,CAACI,EAAS,OAAF,IAAE,CAAF,CAAIa,MAAK,GAAK3C,GAC/B,C,gIC5IM,EAAW,IAAI,IAGf,EAAoB,IAAI,IAE1B,GAAwB,EACxB,GAAgC,EAIpC,SAAS,EAAU,GACjB,OAAO,EAAO,QAAQ,UAAW,KAAK,MACxC,CASA,SAAS,EAAiB,GACxB,IAAM,EAAW,IAAI,IACf,EAAgC,GAgCtC,OA9BA,EAAI,YAAY,SAAQ,YACtB,GAAgC,uBAA5B,EAAmB,KAA+B,CACpD,IAAI,EAAe,EAAmB,KAAK,MACvC,EAbD,GADgB,EAca,EAAmB,KAblC,OAAO,KAAK,UAAU,EAAI,MAAO,EAAI,MAgBlD,EAAe,EAAkB,IAAI,GACrC,IAAiB,EAAa,IAAI,GAGhC,GACF,QAAQ,KAAK,+BAAiC,EAAjC,iMAIL,GACV,EAAkB,IAAI,EAAc,EAAe,IAAI,KAGzD,EAAa,IAAI,GAEZ,EAAS,IAAI,KAChB,EAAS,IAAI,GACb,EAAY,KAAK,G,MAGnB,EAAY,KAAK,GArCvB,IAAyB,CAuCvB,IAEA,2BACK,GAAG,CACN,YAAW,GAEf,CAwBA,SAAS,EAAc,GACrB,IAAI,EAAW,EAAU,GACzB,IAAK,EAAS,IAAI,GAAW,CAC3B,IAAM,EAAS,gBAAM,EAAQ,CAC3B,8BAA6B,EAC7B,6BAA8B,IAEhC,IAAK,GAA0B,aAAhB,EAAO,KACpB,MAAM,IAAI,MAAM,iCAElB,EAAS,IACP,EAjCN,SAAkB,GAChB,IAAM,EAAU,IAAI,IAAyB,EAAI,aAEjD,EAAQ,SAAQ,YACV,EAAK,YAAY,EAAK,IAC1B,OAAO,KAAK,GAAM,SAAQ,YACxB,IAAM,EAAQ,EAAK,GACf,GAA0B,kBAAV,GAClB,EAAQ,IAAI,EAEhB,GACF,IAEA,IAAM,EAAM,EAAI,IAMhB,OALI,WACK,EAAI,kBACJ,EAAI,UAGN,CACT,CAgBM,CAAS,EAAiB,IAE7B,CACD,OAAO,EAAS,IAAI,EACtB,CAGM,SAAU,EACd,G,IACA,wDAGwB,kBAAb,IACT,EAAW,CAAC,IAGd,IAAI,EAAS,EAAS,GAWtB,OATA,EAAK,SAAQ,SAAC,EAAK,GACb,GAAoB,aAAb,EAAI,KACb,GAAU,EAAI,IAAI,OAAO,KAEzB,GAAU,EAEZ,GAAU,EAAS,EAAI,EACzB,IAEO,EAAc,EACvB,CAmBA,IAQiB,EARX,EACD,EADC,EAjBA,WACJ,EAAS,QACT,EAAkB,OACpB,EAcM,EAZA,WACJ,GAAwB,CAC1B,EAUM,EARA,WACJ,GAAgC,CAClC,EAMM,EAJA,WACJ,GAAgC,CAClC,GAUiB,QAAG,KAEhB,IAKE,EAJF,cAIE,EAHF,0BAGE,EAFF,sCAEE,EADF,uCACE,EAGN,EAAW,QAAG,EAEC,I,QC3KF4C,EAAWC,EAAG,0F,OCGrBC,EAA2BD,EAAG,uIAS9BE,EAA0BF,EAAG,sIAS7BG,EAAkBH,EAAG,kJAQrBI,EAAoB,SAAH,GAAmB,IACpCC,EAD4B,EAALC,MAG3B,OACE,cAACtC,EAAA,EAAQ,CAACC,SAAUkC,EAAgB,SACjC,SAAAI,GAAkB,OACjB,8BACE,uBACEC,SAAU,SAAAC,GACRA,EAAEC,iBACFH,EAAmB,CAAE3C,UAAW,CAAE+C,KAAMN,EAAMO,SAAWnB,MACvD,SAAAoB,GACEC,QAAQC,IAAIF,EACd,IAEFR,EAAMO,MAAQ,EAChB,EAAE,UAEF,uBACEjC,IAAK,SAAAqC,GACHX,EAAQW,CACV,IAEF,wBAAQC,KAAK,SAAQ,oCAEnB,GAId,EAEMC,EAAa,iKAGhB,OAHgB,oCACjBC,MAAQ,CACNC,SAAS,GACV,EA8DA,OA9DA,mCACD,WACE,OACE,eAAC,WAAQ,WACP,cAACtE,EAAA,EAAK,CAACG,MAAO8C,EAAUpC,aAAc,IAAI,SACvC,YAA+B,IAA5Bc,EAAO,EAAPA,QAAgBa,GAAF,EAALD,MAAW,EAAJC,MAClB,GAAIb,EAAS,OAAO,+CACpB,IAAQ4C,EAAiB/B,EAAjB+B,KAAMC,EAAWhC,EAAXgC,OAEd,OADAR,QAAQC,IAAIzB,GAEV,eAAC,WAAQ,WACP,8BACG+B,EAAKE,SAAS3B,OAAS,EAAC,8BACEyB,EAAKE,SAAS,IACrC,qBAEN,8BAAMT,QAAQC,IAAIO,KAClB,cAAC,EAAiB,MAGxB,IAEF,cAACxE,EAAA,EAAK,CAACG,MAAOgD,EAAyB,SACpC,YAAwB,IAArBX,EAAI,EAAJA,KAAMb,EAAO,EAAPA,QACA+C,EAAwBlC,EAAxBkC,oBACR,OAAI/C,EAAgB,uDACpBqC,QAAQC,IAAIzB,GAEV,gCACE,sDACCkC,EAAoBC,KAAI,SAAAC,GAAE,OACzB,oBAAIA,GAAIA,EAAGC,GAAG,SACZ,mBAAGC,KAAI,yCAAoCF,EAAGC,IAAK,SAChDD,EAAGC,MAEH,OAIb,IAEF,cAAC7E,EAAA,EAAK,CAACG,MAAOiD,EAAwB,SACnC,YAAwB,IAArBZ,EAAI,EAAJA,KAAMb,EAAO,EAAPA,QACAoD,EAAuBvC,EAAvBuC,mBACR,OAAIpD,EAAgB,uDACpBqC,QAAQC,IAAIzB,GAEV,gCACE,qDACCuC,EAAmBJ,KAAI,SAAAC,GAAE,OACxB,6BACE,mBAAGE,KAAI,yCAAoCF,EAAGC,IAAK,SAChDD,EAAGC,MAFCD,EAAGC,GAIP,OAIb,MAIR,KAAC,EAjEgB,CAASG,aAoEbZ,W","file":"static/js/TestRegistrar.f8c76de1.chunk.js","sourcesContent":["import * as PropTypes from 'prop-types';\n\nimport { OperationVariables } from '../../core';\nimport { QueryComponentOptions } from './types';\nimport { useQuery } from '../hooks';\n\nexport function Query<TData = any, TVariables = OperationVariables>(\n  props: QueryComponentOptions<TData, TVariables>\n) {\n  const { children, query, ...options } = props;\n  const result = useQuery(query, options);\n  return result ? children(result as any) : null;\n}\n\nexport interface Query<TData, TVariables> {\n  propTypes: PropTypes.InferProps<QueryComponentOptions<TData, TVariables>>;\n}\n\nQuery.propTypes = {\n  client: PropTypes.object,\n  children: PropTypes.func.isRequired,\n  fetchPolicy: PropTypes.string,\n  notifyOnNetworkStatusChange: PropTypes.bool,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  pollInterval: PropTypes.number,\n  query: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  ssr: PropTypes.bool,\n  partialRefetch: PropTypes.bool,\n  returnPartialData: PropTypes.bool\n} as Query<any, any>[\"propTypes\"];\n","import * as PropTypes from 'prop-types';\n\nimport { OperationVariables } from '../../core';\nimport { MutationComponentOptions } from './types';\nimport { useMutation } from '../hooks';\n\nexport function Mutation<TData = any, TVariables = OperationVariables>(\n  props: MutationComponentOptions<TData, TVariables>\n) {\n  const [runMutation, result] = useMutation(props.mutation, props);\n  return props.children ? props.children(runMutation, result) : null;\n}\n\nexport interface Mutation<TData, TVariables> {\n  propTypes: PropTypes.InferProps<MutationComponentOptions<TData, TVariables>>;\n}\n\nMutation.propTypes = {\n  mutation: PropTypes.object.isRequired,\n  variables: PropTypes.object,\n  optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  refetchQueries: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n    ),\n    PropTypes.func\n  ]),\n  awaitRefetchQueries: PropTypes.bool,\n  update: PropTypes.func,\n  children: PropTypes.func.isRequired,\n  onCompleted: PropTypes.func,\n  onError: PropTypes.func,\n  fetchPolicy: PropTypes.string,\n} as Mutation<any, any>[\"propTypes\"];\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n      ref.current.options?.onCompleted?.(response.data!, clientOptions);\n      executeOptions.onCompleted?.(response.data!, clientOptions);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (ref.current.options?.onError || clientOptions.onError) {\n        ref.current.options?.onError?.(error, clientOptions);\n        executeOptions.onError?.(error, clientOptions);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    if (ref.current.isMounted) {\n      setResult({ called: false, loading: false, client });\n    }\n  }, []);\n\n  useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n","import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n    return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n    return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n    var seenKeys = new Set();\n    var definitions = [];\n    ast.definitions.forEach(function (fragmentDefinition) {\n        if (fragmentDefinition.kind === 'FragmentDefinition') {\n            var fragmentName = fragmentDefinition.name.value;\n            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n            var sourceKeySet = fragmentSourceMap.get(fragmentName);\n            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n                if (printFragmentWarnings) {\n                    console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n                        + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n                        + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n                }\n            }\n            else if (!sourceKeySet) {\n                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n            }\n            sourceKeySet.add(sourceKey);\n            if (!seenKeys.has(sourceKey)) {\n                seenKeys.add(sourceKey);\n                definitions.push(fragmentDefinition);\n            }\n        }\n        else {\n            definitions.push(fragmentDefinition);\n        }\n    });\n    return __assign(__assign({}, ast), { definitions: definitions });\n}\nfunction stripLoc(doc) {\n    var workSet = new Set(doc.definitions);\n    workSet.forEach(function (node) {\n        if (node.loc)\n            delete node.loc;\n        Object.keys(node).forEach(function (key) {\n            var value = node[key];\n            if (value && typeof value === 'object') {\n                workSet.add(value);\n            }\n        });\n    });\n    var loc = doc.loc;\n    if (loc) {\n        delete loc.startToken;\n        delete loc.endToken;\n    }\n    return doc;\n}\nfunction parseDocument(source) {\n    var cacheKey = normalize(source);\n    if (!docCache.has(cacheKey)) {\n        var parsed = parse(source, {\n            experimentalFragmentVariables: experimentalFragmentVariables,\n            allowLegacyFragmentVariables: experimentalFragmentVariables\n        });\n        if (!parsed || parsed.kind !== 'Document') {\n            throw new Error('Not a valid GraphQL document.');\n        }\n        docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n    }\n    return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (typeof literals === 'string') {\n        literals = [literals];\n    }\n    var result = literals[0];\n    args.forEach(function (arg, i) {\n        if (arg && arg.kind === 'Document') {\n            result += arg.loc.source.body;\n        }\n        else {\n            result += arg;\n        }\n        result += literals[i + 1];\n    });\n    return parseDocument(result);\n}\nexport function resetCaches() {\n    docCache.clear();\n    fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n    printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n    experimentalFragmentVariables = false;\n}\nvar extras = {\n    gql: gql,\n    resetCaches: resetCaches,\n    disableFragmentWarnings: disableFragmentWarnings,\n    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;\n//# sourceMappingURL=index.js.map","import { gql } from '@apollo/client'\r\n\r\nexport const GET_WEB3 = gql`\r\n  query getweb3 @client {\r\n    accounts\r\n    isReadOnly\r\n  }\r\n`","import React, { Fragment, Component } from 'react'\nimport { Query, Mutation } from '@apollo/client/react/components'\nimport { gql } from '@apollo/client'\nimport { GET_WEB3 } from '../graphql/localQueries'\n\nconst GET_PENDING_TRANSACTIONS = gql`\n  query getPendingTransations {\n    pendingTransactions @client {\n      id\n      createdAt\n    }\n  }\n`\n\nconst GET_TRANSACTION_HISTORY = gql`\n  query getTransactionHistory {\n    transactionHistory @client {\n      id\n      createdAt\n    }\n  }\n`\n\nconst REGISTER_DOMAIN = gql`\n  mutation registerTestDomain($name: String!) {\n    registerTestDomain(name: $name) @client {\n      id\n    }\n  }\n`\n\nconst RegisterSubdomain = ({ setTx }) => {\n  let input\n\n  return (\n    <Mutation mutation={REGISTER_DOMAIN}>\n      {registerTestDomain => (\n        <div>\n          <form\n            onSubmit={e => {\n              e.preventDefault()\n              registerTestDomain({ variables: { name: input.value } }).then(\n                txId => {\n                  console.log(txId)\n                }\n              )\n              input.value = ''\n            }}\n          >\n            <input\n              ref={node => {\n                input = node\n              }}\n            />\n            <button type=\"submit\">Register subdomain</button>\n          </form>\n        </div>\n      )}\n    </Mutation>\n  )\n}\n\nclass TestRegistrar extends Component {\n  state = {\n    started: false\n  }\n  render() {\n    return (\n      <Fragment>\n        <Query query={GET_WEB3} pollInterval={500}>\n          {({ loading, error, data }) => {\n            if (loading) return <div>Loading web3</div>\n            const { web3, people } = data\n            console.log(data)\n            return (\n              <Fragment>\n                <div>\n                  {web3.accounts.length > 0\n                    ? `Your ETH address is ${web3.accounts[0]}`\n                    : 'Unlock metamask!'}\n                </div>\n                <div>{console.log(people)}</div>\n                <RegisterSubdomain />\n              </Fragment>\n            )\n          }}\n        </Query>\n        <Query query={GET_PENDING_TRANSACTIONS}>\n          {({ data, loading }) => {\n            const { pendingTransactions } = data\n            if (loading) return <div>Loading pending txs</div>\n            console.log(data)\n            return (\n              <div>\n                <h2>Pending Transactions</h2>\n                {pendingTransactions.map(tx => (\n                  <li tx={tx.id}>\n                    <a href={`http://ropsten.etherscan.io/tx/${tx.id}`}>\n                      {tx.id}\n                    </a>\n                  </li>\n                ))}\n              </div>\n            )\n          }}\n        </Query>\n        <Query query={GET_TRANSACTION_HISTORY}>\n          {({ data, loading }) => {\n            const { transactionHistory } = data\n            if (loading) return <div>Loading pending txs</div>\n            console.log(data)\n            return (\n              <div>\n                <h2>Transaction History</h2>\n                {transactionHistory.map(tx => (\n                  <li key={tx.id}>\n                    <a href={`http://ropsten.etherscan.io/tx/${tx.id}`}>\n                      {tx.id}\n                    </a>\n                  </li>\n                ))}\n              </div>\n            )\n          }}\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default TestRegistrar"],"sourceRoot":""}